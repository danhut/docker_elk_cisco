input {
  udp {
    port => "5000"
    type => syslog
  } 
}

filter {
  if [type] == "syslog" and "grokked" not in [tags] {
    grok {
      match => { "message" => [
        # IOS-XR
        "<%{INT:priority}>%{NUMBER:seq#}: %{DATA:node}:%{CISCOTIMESTAMP:log_date} : %{DATA:process}\[%{INT:pid}\]: %%{WORD:category}-%{WORD:group}-%{INT:severity}-%{WORD:mnemonic} : %{GREEDYDATA:message}",
        
        # IOS
        "<%{INT:pid}>%{NUMBER:seq#}: %{CISCOTIMESTAMP:log_date}: %%{WORD:category}-%{INT:severity}-%{WORD:mnemonic}: %{GREEDYDATA:message}" ]
      }
      add_tag => ["network", "grokked"]
      remove_tag => ["_grokparsefailure"]
      overwrite => [ "message" ]
    }
     date {
       match => [
         # IOS-XR & IOS  , Netrounds
         "log_date", "MMM dd HH:mm:ss.SSS", "MMM dd HH:mm:ss"
       ]
       remove_field => "log_date"
     }
  }

  if [type] == "syslog" and "grokked" not in [tags] {
    grok {
      match => { "message" => [
        #Netrounds 
          "<%{INT:num}>%{SYSLOGTIMESTAMP:log_date} %{DATA:node} %{DATA:process}\[%{INT:pid}\]:%{GREEDYDATA:message}"]
              }
      add_tag => ["server", "grokked"]
      remove_tag => ["_grokparsefailure"]
      overwrite => [ "message" ]
    }
     date {
       match => [
         # IOS-XR & IOS  , Netrounds
         "log_date", "MMM dd HH:mm:ss.SSS", "MMM dd HH:mm:ss"
       ]
       remove_field => "log_date"
     }
  }

  
}

output {
    stdout { codec => rubydebug }
    elasticsearch {
      hosts           => "elasticsearch:9200"
  }
}
